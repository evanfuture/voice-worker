import { readFileSync, writeFileSync } from "node:fs";
import { basename } from "node:path";
import type { Parser } from "../types.js";

export const parser: Parser = {
  name: "summarize",
  input: [".transcript.txt"],
  outputExt: ".summary.txt",
  dependsOn: ["transcribe"],

  async run(inputPath: string): Promise<string> {
    const outputPath = inputPath.replace(".transcript.txt", ".summary.txt");

    // Read the transcript content
    const transcriptContent = readFileSync(inputPath, "utf-8");

    // Mock summarization - in real implementation, you'd call an LLM API
    const mockSummary = `SUMMARY OF: ${basename(inputPath)}

Original transcript length: ${transcriptContent.length} characters

KEY POINTS:
- This is an automatically generated summary
- The original file contained a mock transcription
- In a real implementation, this would use an LLM API to analyze the transcript
- The summary would extract key themes, topics, and important information

CONTENT OVERVIEW:
The transcript appears to be a demo/placeholder file generated by the transcription system.
A real summary would provide meaningful insights about the actual spoken content.

Generated at: ${new Date().toISOString()}
Source transcript: ${inputPath}`;

    // Simulate API processing time
    await new Promise((resolve) => setTimeout(resolve, 1500));

    writeFileSync(outputPath, mockSummary, "utf-8");

    return outputPath;
  },
};
