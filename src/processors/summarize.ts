import { readFileSync, writeFileSync } from "node:fs";
import { basename, join } from "node:path";
import type { Parser } from "../types.js";
import OpenAI from "openai";
import {
  estimateSummarizationCost,
  calculateGPTCost,
  estimateTokenCount,
  formatCost,
} from "../utils/cost-calculator.js";
import { ChatModel } from "openai/resources/shared.mjs";

// Lazy initialization of OpenAI client to avoid import-time API key requirement
let openaiClient: OpenAI | null = null;

function getOpenAIClient(): OpenAI {
  if (!openaiClient) {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error(
        "OPENAI_API_KEY environment variable is required for summarization"
      );
    }
    openaiClient = new OpenAI({ apiKey });
  }
  return openaiClient;
}

export const parser: Parser = {
  name: "summarize",
  input: [".transcript.txt", ".combined.transcript.txt"],
  outputExt: ".summary.txt",
  dependsOn: [], // Remove dependency to allow manual selection

  async run(
    inputPath: string,
    config: Record<string, any> = {}
  ): Promise<string> {
    const outputPath = inputPath.replace(/\.transcript\.txt$/, ".summary.txt");
    const model: ChatModel = "gpt-4.1";

    console.log(`Summarizing transcript: ${basename(inputPath)}`);

    try {
      // Read the transcript content
      const transcriptContent = readFileSync(inputPath, "utf-8");

      // Clean the transcript content to extract the main text
      const lines = transcriptContent.split("\n");
      const contentLines = lines.filter(
        (line) =>
          line.trim() &&
          !line.startsWith("[") &&
          !line.startsWith("===") &&
          !line.startsWith("Transcribed") &&
          !line.startsWith("Audio duration") &&
          !line.includes("DETAILED SEGMENTS")
      );

      const cleanContent = contentLines.join("\n");

      if (!cleanContent.trim()) {
        throw new Error("No meaningful content found in transcript");
      }

      // Calculate estimated cost before making the API call
      const costEstimate = estimateSummarizationCost(cleanContent, model);
      console.log(
        `  Estimated cost: ${formatCost(costEstimate.estimatedCost)} (${costEstimate.estimatedInputTokens} input + ${costEstimate.estimatedOutputTokens} output tokens)`
      );

      // Load the summarization prompt from file
      const promptPath = config.promptPath
        ? join(process.cwd(), config.promptPath)
        : join(process.cwd(), "prompts", "summarize.md");

      const systemPrompt = readFileSync(promptPath, "utf-8");

      const userPrompt = `Please summarize this transcript:

${cleanContent}`;

      // Get OpenAI client with lazy initialization
      const openai = getOpenAIClient();

      // Call OpenAI API
      console.log(`  Calling ${model} for summarization...`);
      const response = await openai.chat.completions.create({
        model: model,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt },
        ],
        temperature: 0.3, // Lower temperature for more focused summaries
        max_tokens: 2000, // Reasonable limit for summaries
      });

      const summary = response.choices[0]?.message?.content;
      if (!summary) {
        throw new Error("No summary generated by OpenAI");
      }

      // Calculate actual cost based on token usage
      const actualInputTokens =
        response.usage?.prompt_tokens || costEstimate.estimatedInputTokens;
      const actualOutputTokens =
        response.usage?.completion_tokens || costEstimate.estimatedOutputTokens;
      const actualCost = calculateGPTCost(
        actualInputTokens,
        actualOutputTokens,
        model
      );

      console.log(
        `  âœ… Summary generated: ${actualInputTokens} input + ${actualOutputTokens} output tokens`
      );
      console.log(`  ðŸ’° Actual cost: ${formatCost(actualCost.totalCost)}`);

      // Create the final output with metadata
      const finalSummary = `SUMMARY OF: ${basename(inputPath)}

Generated by: OpenAI ${model}
Source transcript: ${inputPath}
Generated at: ${new Date().toISOString()}
Processing cost: ${formatCost(actualCost.totalCost)} (${actualInputTokens} input + ${actualOutputTokens} output tokens)
Original content: ${transcriptContent.length} characters, ${contentLines.length} content lines

================================================================================

${summary}

================================================================================

Processing Details:
- Model: ${model}
- Input tokens: ${actualInputTokens}
- Output tokens: ${actualOutputTokens}
- Total cost: ${formatCost(actualCost.totalCost)}
- Processing time: ${new Date().toISOString()}`;

      writeFileSync(outputPath, finalSummary, "utf-8");

      return outputPath;
    } catch (error) {
      console.error(`Failed to summarize ${basename(inputPath)}:`, error);

      // Create error summary
      const errorSummary = `SUMMARY ERROR: ${basename(inputPath)}

Failed to generate AI summary at: ${new Date().toISOString()}
Error: ${error instanceof Error ? error.message : "Unknown error"}
Source transcript: ${inputPath}

The transcript content could not be processed by the AI summarization service.
Please check the transcript content and try again, or process manually.

Generated at: ${new Date().toISOString()}`;

      writeFileSync(outputPath, errorSummary, "utf-8");
      throw error;
    }
  },
};
